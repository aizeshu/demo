package com.cl.solidity;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Goods extends Contract {
    public static final String[] BINARY_ARRAY = {"","","5092915050565b600060208284031215611d6f57600080fd5b6000611d7d84828501611bfb565b91505092915050565b600060208284031215611d9857600080fd5b6000611da684828501611c0f565b91505092915050565b600060208284031215611dc157600080fd5b6000611dcf84828501611c23565b91505092915050565b600060208284031215611dea57600080fd5b600082013567ffffffffffffffff811115611e0457600080fd5b611e1084828501611c37565b91505092915050565b600060208284031215611e2b57600080fd5b600082015167ffffffffffffffff811115611e4557600080fd5b611e5184828501611c8d565b91505092915050565b60008060008060808587031215611e7057600080fd5b600085013567ffffffffffffffff811115611e8a57600080fd5b611e9687828801611c37565b945050602085013567ffffffffffffffff811115611eb357600080fd5b611ebf87828801611c37565b935050604085013567ffffffffffffffff811115611edc57600080fd5b611ee887828801611c37565b925050606085013567ffffffffffffffff811115611f0557600080fd5b611f1187828801611c37565b91505092959194509250565b600080600060608486031215611f3257600080fd5b600084013567ffffffffffffffff811115611f4c57600080fd5b611f5886828701611c37565b935050602084013567ffffffffffffffff811115611f7557600080fd5b611f8186828701611c37565b9250506040611f9286828701611ce3565b9150509250925092565b60008060408385031215611faf57600080fd5b600083013567ffffffffffffffff811115611fc957600080fd5b611fd585828601611c37565b9250506020611fe685828601611ce3565b9150509250929050565b60006020828403121561200257600080fd5b600061201084828501611cf7565b91505092915050565b6120228161258c565b82525050565b6120318161259e565b82525050565b6120408161251c565b82525050565b61204f816125b0565b82525050565b6000612060826124f1565b8084526120748160208601602086016125d1565b61207d81612604565b602085010191505092915050565b6000612096826124e6565b8084526120aa8160208601602086016125d1565b6120b381612604565b602085010191505092915050565b6000600382527f67696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f7069635f686173680000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f75696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f62616c616e6365000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f646174615f6861736800000000000000000000000000000000000000000000006020830152604082019050919050565b6121dd81612526565b82525050565b60006020820190506121f86000830184612037565b92915050565b60006020820190506122136000830184612046565b92915050565b60006020820190508181036000830152612233818461208b565b905092915050565b600060408201905081810360008301526122558185612055565b90506122646020830184612019565b9392505050565b600060408201905081810360008301526122858185612055565b90506122946020830184612028565b9392505050565b600060608201905081810360008301526122b58186612055565b90506122c46020830185612028565b6122d16040830184612019565b949350505050565b600060408201905081810360008301526122f38185612055565b905081810360208301526123078184612055565b90509392505050565b60006040820190508181036000830152612329816120c1565b9050818103602083015261233d8184612055565b905092915050565b6000604082019050818103600083015261235e816120f8565b905081810360208301526123728184612055565b905092915050565b600060208201905081810360008301526123938161212f565b9050919050565b600060408201905081810360008301526123b38161212f565b905081810360208301526123c78184612055565b905092915050565b600060208201905081810360008301526123e881612166565b9050919050565b6000604082019050818103600083015261240881612166565b905061241760208301846121d4565b92915050565b600060208201905081810360008301526124368161219d565b9050919050565b600060408201905081810360008301526124568161219d565b9050818103602083015261246a8184612055565b905092915050565b600060208201905061248760008301846121d4565b92915050565b6000604051905081810181811067ffffffffffffffff821117156124b057600080fd5b8060405250919050565b600067ffffffffffffffff8211156124d157600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600061253b826124fc565b9050919050565b600061254d826124fc565b9050919050565b600061255f826124fc565b9050919050565b6000612571826124fc565b9050919050565b6000819050919050565b6000819050919050565b6000612597826124fc565b9050919050565b60006125a9826124fc565b9050919050565b60006125bb8261251c565b9050919050565b82818337600083830152505050565b60005b838110156125ef5780820151818401526020810190506125d4565b838111156125fe576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058206d59f05b40b6b9f6191edfb939c5043d224db970005c7ac94386b2e2c223ba7d6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b50600061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040805190810160405280600e81526020017f74657374325f6e66745f676f6f640000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620000a59190620001ef565b602060405180830381600087803b158015620000c057600080fd5b505af1158015620000d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620000fb919081019062000119565b505062000299565b600062000111825162000248565b905092915050565b6000602082840312156200012c57600080fd5b60006200013c8482850162000103565b91505092915050565b600062000152826200023d565b8084526200016881602086016020860162000252565b620001738162000288565b602085010191505092915050565b6000601682527f7569642c7069635f686173682c646174615f68617368000000000000000000006020830152604082019050919050565b6000600382527f67696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060608201905081810360008301526200020b818462000145565b905081810360208301526200022081620001b8565b90508181036040830152620002358162000181565b905092915050565b600081519050919050565b6000819050919050565b60005b838110156200027257808201518184015260208101905062000255565b8381111562000282576000848401525b50505050565b6000601f19601f8301169050919050565b61264f80620002a96000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063464f48271461007d5780636191e2db146100ba57806370ebdb0c146100f8578063848df61e14610135578063a9549b3414610172578063f977b272146101af575b600080fd5b34801561008957600080fd5b506100a4600480360361009f9190810190611dd8565b6101ec565b6040516100b19190612472565b60405180910390f35b3480156100c657600080fd5b506100e160048036036100dc9190810190611dd8565b61057c565b6040516100ef9291906122d9565b60405180910390f35b34801561010457600080fd5b5061011f600480360361011a9190810190611f1d565b610b21565b60405161012c91906121e3565b60405180910390f35b34801561014157600080fd5b5061015c60048036036101579190810190611e5a565b6112aa565b60405161016991906121e3565b60405180910390f35b34801561017e57600080fd5b5061019960048036036101949190810190611f1d565b611709565b6040516101a691906121e3565b60405180910390f35b3480156101bb57600080fd5b506101d660048036036101d19190810190611f9c565b6117e7565b6040516101e391906121e3565b60405180910390f35b60008060008060008061100194508473ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600781526020017f6163636f756e74000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102849190612219565b602060405180830381600087803b15801561029e57600080fd5b505af11580156102b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102d69190810190611d86565b93508373ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561033c57600080fd5b505af1158015610350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103749190810190611d0b565b92508373ffffffffffffffffffffffffffffffffffffffff1663d8ac595788856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103cd92919061223b565b602060405180830381600087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061041f9190810190611d34565b91508173ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161047791906121fe565b602060405180830381600087803b15801561049157600080fd5b505af11580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104c99190810190611d5d565b73ffffffffffffffffffffffffffffffffffffffff1663df7427af6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161051b90612365565b602060405180830381600087803b15801561053557600080fd5b505af1158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061056d9190810190611ff0565b90508095505050505050919050565b606080600080600080600060608061100196508673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600e81526020017f74657374325f6e66745f676f6f640000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106199190612219565b602060405180830381600087803b15801561063357600080fd5b505af1158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061066b9190810190611d86565b95508573ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106d157600080fd5b505af11580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107099190810190611d0b565b94508473ffffffffffffffffffffffffffffffffffffffff1663ae763db58b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610760919061243d565b600060405180830381600087803b15801561077a57600080fd5b505af115801561078e573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663d8ac59578b876040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107e992919061223b565b602060405180830381600087803b15801561080357600080fd5b505af1158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061083b9190810190611d34565b93508373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156108a157600080fd5b505af11580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108d99190810190611daf565b6000141561090c576020604051908101604052806000815250602060405190810160405280600081525098509850610b15565b8373ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161096291906121fe565b602060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109b49190810190611d5d565b92508273ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a0990612310565b600060405180830381600087803b158015610a2357600080fd5b505af1158015610a37573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610a609190810190611e19565b91508273ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ab5906123b3565b600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610b0c9190810190611e19565b90508181985098505b50505050505050915091565b600080600080600080606060008060008061100199508973ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600e81526020017f74657374325f6e66745f676f6f640000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bc19190612219565b602060405180830381600087803b158015610bdb57600080fd5b505af1158015610bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c139190810190611d86565b98508873ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cb19190810190611d0b565b97508873ffffffffffffffffffffffffffffffffffffffff1663d8ac59578f8a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d0a92919061223b565b602060405180830381600087803b158015610d2457600080fd5b505af1158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d5c91908101","90611d34565b96508673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dc257600080fd5b505af1158015610dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dfa9190810190611daf565b60001415610e2a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9a50611299565b8673ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e8091906121fe565b602060405180830381600087803b158015610e9a57600080fd5b505af1158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ed29190810190611d5d565b95508573ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f2790612310565b600060405180830381600087803b158015610f4157600080fd5b505af1158015610f55573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610f7e9190810190611e19565b9450610f8b858e8e611709565b93508360001415611295578873ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ffa57600080fd5b505af115801561100e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110329190810190611d0b565b92508873ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561109857600080fd5b505af11580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110d09190810190611d5d565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48f6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611127919061243d565b600060405180830381600087803b15801561114157600080fd5b505af1158015611155573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48e6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111ae9190612330565b600060405180830381600087803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff1663664b37d68f848b6040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112399392919061229b565b602060405180830381600087803b15801561125357600080fd5b505af1158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061128b9190810190611daf565b9050809a50611299565b839a505b505050505050505050509392505050565b600080600080600061100193508373ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600e81526020017f74657374325f6e66745f676f6f640000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113419190612219565b602060405180830381600087803b15801561135b57600080fd5b505af115801561136f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113939190810190611d86565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113f957600080fd5b505af115801561140d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114319190810190611d5d565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611488919061243d565b600060405180830381600087803b1580156114a257600080fd5b505af11580156114b6573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161150f9190612330565b600060405180830381600087803b15801561152957600080fd5b505af115801561153d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115969190612408565b600060405180830381600087803b1580156115b057600080fd5b505af11580156115c4573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161161d91906123d3565b600060405180830381600087803b15801561163757600080fd5b505af115801561164b573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08a846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116a692919061226b565b602060405180830381600087803b1580156116c057600080fd5b505af11580156116d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116f89190810190611daf565b905080945050505050949350505050565b600080600080600061171a876101ec565b93508386111561174c577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe94506117dc565b611758878786036117e7565b925060018314151561178c577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd94506117dc565b611795886101ec565b91506117a3888784016117e7565b90506001811415156117d7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc94506117dc565b600094505b505050509392505050565b600080600080600061100193508373ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600781526020017f6163636f756e74000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161187e9190612219565b602060405180830381600087803b15801561189857600080fd5b505af11580156118ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118d09190810190611d86565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561193657600080fd5b505af115801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061196e9190810190611d5d565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119c59190612330565b600060405180830381600087803b1580156119df57600080fd5b505af11580156119f3573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f2f4ee6d876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a4c9190612385565b600060405180830381600087803b158015611a6657600080fd5b505af1158015611a7a573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663664b37d688848673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611b0057600080fd5b505af1158015611b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b389190810190611d0b565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b729392919061229b565b602060405180830381600087803b158015611b8c57600080fd5b505af1158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bc49190810190611daf565b90508094505050505092915050565b6000611bdf8251612530565b905092915050565b6000611bf38251612542565b905092915050565b6000611c078251612554565b905092915050565b6000611c1b8251612566565b905092915050565b6000611c2f8251612578565b905092915050565b600082601f8301121515611c4a57600080fd5b8135611c5d611c58826124ba565b61248d565b91508082526020830160208301858383011115611c7957600080fd5b611c848382846125c2565b50505092915050565b600082601f8301121515611ca057600080fd5b8151611cb3611cae826124ba565b61248d565b91508082526020830160208301858383011115611ccf57600080fd5b611cda8382846125d1565b50505092915050565b6000611cef8235612582565b905092915050565b6000611d038251612582565b905092915050565b600060208284031215611d1d57600080fd5b6000611d2b84828501611bd3565b91505092915050565b600060208284031215611d4657600080fd5b6000611d5484828501611be7565b9150","5092915050565b600060208284031215611d6f57600080fd5b6000611d7d84828501611bfb565b91505092915050565b600060208284031215611d9857600080fd5b6000611da684828501611c0f565b91505092915050565b600060208284031215611dc157600080fd5b6000611dcf84828501611c23565b91505092915050565b600060208284031215611dea57600080fd5b600082013567ffffffffffffffff811115611e0457600080fd5b611e1084828501611c37565b91505092915050565b600060208284031215611e2b57600080fd5b600082015167ffffffffffffffff811115611e4557600080fd5b611e5184828501611c8d565b91505092915050565b60008060008060808587031215611e7057600080fd5b600085013567ffffffffffffffff811115611e8a57600080fd5b611e9687828801611c37565b945050602085013567ffffffffffffffff811115611eb357600080fd5b611ebf87828801611c37565b935050604085013567ffffffffffffffff811115611edc57600080fd5b611ee887828801611c37565b925050606085013567ffffffffffffffff811115611f0557600080fd5b611f1187828801611c37565b91505092959194509250565b600080600060608486031215611f3257600080fd5b600084013567ffffffffffffffff811115611f4c57600080fd5b611f5886828701611c37565b935050602084013567ffffffffffffffff811115611f7557600080fd5b611f8186828701611c37565b9250506040611f9286828701611ce3565b9150509250925092565b60008060408385031215611faf57600080fd5b600083013567ffffffffffffffff811115611fc957600080fd5b611fd585828601611c37565b9250506020611fe685828601611ce3565b9150509250929050565b60006020828403121561200257600080fd5b600061201084828501611cf7565b91505092915050565b6120228161258c565b82525050565b6120318161259e565b82525050565b6120408161251c565b82525050565b61204f816125b0565b82525050565b6000612060826124f1565b8084526120748160208601602086016125d1565b61207d81612604565b602085010191505092915050565b6000612096826124e6565b8084526120aa8160208601602086016125d1565b6120b381612604565b602085010191505092915050565b6000600382527f75696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f62616c616e6365000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f646174615f6861736800000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f7069635f686173680000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f67696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6121dd81612526565b82525050565b60006020820190506121f86000830184612037565b92915050565b60006020820190506122136000830184612046565b92915050565b60006020820190508181036000830152612233818461208b565b905092915050565b600060408201905081810360008301526122558185612055565b90506122646020830184612019565b9392505050565b600060408201905081810360008301526122858185612055565b90506122946020830184612028565b9392505050565b600060608201905081810360008301526122b58186612055565b90506122c46020830185612028565b6122d16040830184612019565b949350505050565b600060408201905081810360008301526122f38185612055565b905081810360208301526123078184612055565b90509392505050565b60006020820190508181036000830152612329816120c1565b9050919050565b60006040820190508181036000830152612349816120c1565b9050818103602083015261235d8184612055565b905092915050565b6000602082019050818103600083015261237e816120f8565b9050919050565b6000604082019050818103600083015261239e816120f8565b90506123ad60208301846121d4565b92915050565b600060208201905081810360008301526123cc8161212f565b9050919050565b600060408201905081810360008301526123ec8161212f565b905081810360208301526124008184612055565b905092915050565b6000604082019050818103600083015261242181612166565b905081810360208301526124358184612055565b905092915050565b600060408201905081810360008301526124568161219d565b9050818103602083015261246a8184612055565b905092915050565b600060208201905061248760008301846121d4565b92915050565b6000604051905081810181811067ffffffffffffffff821117156124b057600080fd5b8060405250919050565b600067ffffffffffffffff8211156124d157600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600061253b826124fc565b9050919050565b600061254d826124fc565b9050919050565b600061255f826124fc565b9050919050565b6000612571826124fc565b9050919050565b6000819050919050565b6000819050919050565b6000612597826124fc565b9050919050565b60006125a9826124fc565b9050919050565b60006125bb8261251c565b9050919050565b82818337600083830152505050565b60005b838110156125ef5780820151818401526020810190506125d4565b838111156125fe576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582045e0d157f9bfd3a767644ca5189a6512e96d9d8a68061a707e89d2d5ab234e546c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"gid\",\"type\":\"string\"},{\"name\":\"buy_uid\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellGoods\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gid\",\"type\":\"string\"},{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"pic_hash\",\"type\":\"string\"},{\"name\":\"data_hash\",\"type\":\"string\"}],\"name\":\"createGoods\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gid\",\"type\":\"string\"}],\"name\":\"selectGood\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"own_uid\",\"type\":\"string\"},{\"name\":\"buy_uid\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uid\",\"type\":\"string\"}],\"name\":\"selectBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SELLGOODS = "sellGoods";

    public static final String FUNC_CREATEGOODS = "createGoods";

    public static final String FUNC_SELECTGOOD = "selectGood";

    public static final String FUNC_UPDATEBALANCE = "updateBalance";

    public static final String FUNC_TRANSFERBALANCE = "transferBalance";

    public static final String FUNC_SELECTBALANCE = "selectBalance";

    protected Goods(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt sellGoods(String gid, String buy_uid, BigInteger price) {
        final Function function = new Function(
                FUNC_SELLGOODS, 
                Arrays.<Type>asList(new Utf8String(gid),
                new Utf8String(buy_uid),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] sellGoods(String gid, String buy_uid, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELLGOODS, 
                Arrays.<Type>asList(new Utf8String(gid),
                new Utf8String(buy_uid),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSellGoods(String gid, String buy_uid, BigInteger price) {
        final Function function = new Function(
                FUNC_SELLGOODS, 
                Arrays.<Type>asList(new Utf8String(gid),
                new Utf8String(buy_uid),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSellGoodsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELLGOODS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getSellGoodsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELLGOODS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createGoods(String gid, String uid, String pic_hash, String data_hash) {
        final Function function = new Function(
                FUNC_CREATEGOODS, 
                Arrays.<Type>asList(new Utf8String(gid),
                new Utf8String(uid),
                new Utf8String(pic_hash),
                new Utf8String(data_hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createGoods(String gid, String uid, String pic_hash, String data_hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEGOODS, 
                Arrays.<Type>asList(new Utf8String(gid),
                new Utf8String(uid),
                new Utf8String(pic_hash),
                new Utf8String(data_hash)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateGoods(String gid, String uid, String pic_hash, String data_hash) {
        final Function function = new Function(
                FUNC_CREATEGOODS, 
                Arrays.<Type>asList(new Utf8String(gid),
                new Utf8String(uid),
                new Utf8String(pic_hash),
                new Utf8String(data_hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getCreateGoodsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEGOODS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getCreateGoodsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEGOODS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt selectGood(String gid) {
        final Function function = new Function(
                FUNC_SELECTGOOD, 
                Arrays.<Type>asList(new Utf8String(gid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] selectGood(String gid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTGOOD, 
                Arrays.<Type>asList(new Utf8String(gid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelectGood(String gid) {
        final Function function = new Function(
                FUNC_SELECTGOOD, 
                Arrays.<Type>asList(new Utf8String(gid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSelectGoodInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTGOOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<String, String> getSelectGoodOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTGOOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt updateBalance(String uid, BigInteger balance) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(new Utf8String(uid),
                new Uint256(balance)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateBalance(String uid, BigInteger balance, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(new Utf8String(uid),
                new Uint256(balance)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateBalance(String uid, BigInteger balance) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(new Utf8String(uid),
                new Uint256(balance)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateBalanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt transferBalance(String own_uid, String buy_uid, BigInteger price) {
        final Function function = new Function(
                FUNC_TRANSFERBALANCE, 
                Arrays.<Type>asList(new Utf8String(own_uid),
                new Utf8String(buy_uid),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferBalance(String own_uid, String buy_uid, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERBALANCE, 
                Arrays.<Type>asList(new Utf8String(own_uid),
                new Utf8String(buy_uid),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferBalance(String own_uid, String buy_uid, BigInteger price) {
        final Function function = new Function(
                FUNC_TRANSFERBALANCE, 
                Arrays.<Type>asList(new Utf8String(own_uid),
                new Utf8String(buy_uid),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferBalanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFERBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt selectBalance(String uid) {
        final Function function = new Function(
                FUNC_SELECTBALANCE, 
                Arrays.<Type>asList(new Utf8String(uid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] selectBalance(String uid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTBALANCE, 
                Arrays.<Type>asList(new Utf8String(uid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelectBalance(String uid) {
        final Function function = new Function(
                FUNC_SELECTBALANCE, 
                Arrays.<Type>asList(new Utf8String(uid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSelectBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getSelectBalanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static Goods load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Goods(contractAddress, client, credential);
    }

    public static Goods deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Goods.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
